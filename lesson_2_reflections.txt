What happens when you initialize a repository? Why do you need to do it?

	Git creates the hidden .git directory that stores all the git information.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

	The staging area is different because only the files you choose will enter
	it. This means that you can filter stuff away that you do not want committed.

How can you use the staging area to make sure you have one commit per logical
change?

	By running git diff --staged you can see the changes you are about to commit

	by running git diff you can see the diff between the staging area and the
	working directory

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	If you want to try out some more complicated changes that require more than
	one commit.

	If you are multiple people working on a project you could each work on your
	own branch and then make pull requests to master when each task is done.

How do the diagrams help you visualize the branch structure?

	I can give you an overview of the activity in multiple branches.
	It can show when one branch was created of another.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches together is that we get one branch with a
	final commit that has two parents.
	when we do git log we see all the accessible commits in cronological order
	so the diff between two successive commits might be quite large.
	If you want to see the changes from a commit to its parent then you can do
	git show <commit>

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	If I understand the question correctly then merging manually would be a huge
	timeconsuming task. Having git merge the branches for us is really quite
	wonderfull.




